{"version":3,"sources":["Store/StoreContext.ts","API/axios.ts","Components/Menu.tsx","Components/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StoreContext","React","createContext","fetch","axios","create","baseURL","timeout","interceptors","response","use","status","data","error","Promise","reject","MenuApp","observer","store","useContext","useState","defaultSelectedKeys","setDefaultSelectedKeys","menuData","key","icon","title","url","axiosIf","JSON","stringify","getData","getMapData","useEffect","item","find","c","setLoading","method","then","res","setData","results","localStorage","setItem","setMapData","catch","parse","getItem","message","moment","updateTime","format","mode","onClick","e","console","log","setMenuKey","map","Item","type","ContentApp","Suspense","fallback","getMenuKey","SummarizeApp","lazy","TrendApp","MapApp","getComponent","App","useObservable","mapData","loading","menuKey","Provider","value","spinning","getLoading","className","Menu","Content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd5cecef.chunk.js","sourcesContent":["import React from 'react';\n\nconst StoreContext = React.createContext<any>(null);\n\nexport default StoreContext;\n","import axios from 'axios'\n\nlet fetch = axios.create({\n    baseURL: \"https://lab.isaaclin.cn/nCoV\", // 这里是本地express启动的服务地址\n    timeout: 5000 // request timeout\n});\n\nfetch.interceptors.response.use(\n    response => {\n        //拦截响应，做统一处理\n        if (response.status === 200) {\n            return response.data\n        }\n    },\n    //接口错误状态处理，也就是说无响应时的处理\n    error => {\n        return Promise.reject(error.response) // 返回接口返回的错误信息\n    });\n\nexport default fetch;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Menu, Icon, message } from 'antd';\nimport axios from '@axios';\nimport { observer } from 'mobx-react-lite'\nimport StoreContext from '@StoreContext';\nimport moment from 'moment';\n\n\nconst MenuApp = observer(() => {\n    const { store } = useContext(StoreContext);\n    // 初始化选中菜单\n    const [defaultSelectedKeys, setDefaultSelectedKeys] = useState(['summarize']);\n    // 初始化菜单数组\n    const menuData = [{\n        key: 'summarize',\n        icon: 'info-circle',\n        title: '概括',\n        url: '/api/overall',\n        axiosIf: JSON.stringify(store.getData) === '{}',\n    }, {\n        key: 'trend',\n        icon: 'area-chart',\n        title: '趋势',\n        url: '',\n        axiosIf: false,\n    }, {\n        key: 'map',\n        icon: 'pie-chart',\n        title: '地图',\n        url: '/api/area',\n        axiosIf: JSON.stringify(store.getMapData) === '[{}]',\n    }];\n    // 点击菜单事件\n    const handleClick = (e:{key: string}) => {\n        console.log(e);\n        setDefaultSelectedKeys([e.key]);\n        store.setMenuKey(e.key);\n    };\n    // 选中菜单更改的回调\n    useEffect(() => {\n        const item = menuData.find(c => c.key === defaultSelectedKeys[0]);\n        if (item && item.url && item.axiosIf) {\n            store.setLoading(true);\n            axios({\n                method: 'GET',\n                url: item ? item.url : '',\n            }).then((res:any) => {\n                switch (defaultSelectedKeys[0]) {\n                    case 'summarize':\n                        store.setData(res.results);\n                        localStorage.setItem('cache', JSON.stringify(res.results));\n                        break;\n                    case 'map':\n                        store.setMapData(res.results);\n                        localStorage.setItem('mapCache', JSON.stringify(res.results));\n                        break;\n                    default:\n                        break;\n                }\n                store.setLoading(false);\n            }).catch(() => {\n                    store.setLoading(false);\n                    let data;\n                    switch (defaultSelectedKeys[0]) {\n                        case 'summarize':\n                            data = JSON.parse(localStorage.getItem('cache') as string);\n                            if (data != null) {\n                                message.error(`服务器错误，已使用缓存数据，更新时间${moment(data[0].updateTime).format('YYYY-MM-DD HH:mm:ss')}`);\n                                store.setData(data);\n                            }\n                            break;\n                        case 'map':\n                            data = JSON.parse(localStorage.getItem('mapCache') as string);\n                            if (data !== null) {\n                                message.error(`服务器错误，已使用缓存数据，更新时间${moment(data[0].updateTime).format('YYYY-MM-DD HH:mm:ss')}`);\n                                store.setData(data);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                    if (!data) {\n                        message.error('服务器错误，请稍后再试');\n                    }\n                }\n            );\n        }\n    }, [defaultSelectedKeys, store]);\n    return (\n        <Menu\n            defaultSelectedKeys={defaultSelectedKeys}\n            mode={'horizontal'}\n            onClick={handleClick}\n        >\n            {menuData.map(c => (\n                <Menu.Item key={c.key}>\n                    <Icon type={c.icon} />\n                    {c.title}\n                </Menu.Item>\n            ))}\n        </Menu>\n    )\n});\n\nexport default MenuApp;\n","import React, {useContext} from 'react';\nimport StoreContext from '@StoreContext';\nimport { observer } from 'mobx-react-lite'\n\nconst ContentApp = observer(() => {\n    const { store } = useContext(StoreContext);\n    const data = store.getData[0] || {};\n    const getComponent = () => {\n      switch (store.getMenuKey) {\n          case 'summarize':\n              const SummarizeApp = React.lazy(() => import('./summarize'));\n              return <SummarizeApp data={data}></SummarizeApp>;\n          case 'trend':\n              const TrendApp = React.lazy(() => import('./Trend'));\n              return <TrendApp data={data}></TrendApp>\n          case 'map':\n              const MapApp = React.lazy(() => import('./MapApp'));\n              return <MapApp></MapApp>\n          default:\n              break;\n      }\n    };\n    return <>\n            <React.Suspense fallback={<div>Loading...</div>}>\n                {getComponent()}\n            </React.Suspense>\n        </>\n});\n\nexport default ContentApp;\n","import React  from 'react';\nimport { observer, useObservable } from 'mobx-react-lite'\nimport StoreContext from '@StoreContext';\nimport { Spin } from 'antd';\n\nimport MenuApp from \"./Components/Menu\";\nimport ContentApp from \"./Components/Content\";\nimport './App.css';\n\nconst App = observer(() => {\n    const store = useObservable({\n        data: {},\n        mapData: [{}],\n        loading: false,\n        menuKey: 'summarize',\n        setData(data: any): any {\n            store.data = JSON.parse(JSON.stringify(data));\n        },\n        setLoading(loading: boolean): void {\n            store.loading = loading;\n        },\n        setMenuKey(data: string): void {\n            store.menuKey = data;\n        },\n        setMapData(data: Array<object>): void {\n            store.mapData = data;\n        },\n        get getData(): any {\n            return JSON.parse(JSON.stringify(store.data));\n        },\n        get getLoading(): boolean {\n            return store.loading;\n        },\n        get getMenuKey(): string {\n            return store.menuKey;\n        },\n        get getMapData(): Array<object> {\n            return store.mapData;\n        }\n    });\n    return (\n          <StoreContext.Provider\n              value={{store}}\n          >\n              <Spin spinning={store.getLoading}>\n                  <div className=\"App\">\n                      <MenuApp></MenuApp>\n                      <ContentApp/>\n                  </div>\n              </Spin>\n          </StoreContext.Provider>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}